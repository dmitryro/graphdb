// server/src/cli/help_display.rs

use clap::CommandFactory; // Import CommandFactory
use clap::Command; // Import Command for print_filtered_help_clap_generated

use super::cli::CliArgs; // Corrected: Import CliArgs from the sibling 'cli' module

/// Prints the general help message for the CLI, generated by clap.
/// This function is typically called when no valid command is recognized,
/// or when `graphdb-cli help` is used without a specific command filter.
pub fn print_help_clap_generated() {
    CliArgs::command().print_help().expect("Failed to print general help");
}

/// Prints filtered help for a specific command or subcommand path, generated by clap.
///
/// This function leverages clap's internal help generation.
/// It takes the top-level `Command` object from `CliArgs` and a space-separated
/// string representing the command path (e.g., "daemon start", "status rest").
pub fn print_filtered_help_clap_generated(root_cmd: &mut Command, filter_command: &str) {
    let parts: Vec<&str> = filter_command.split_whitespace().collect();

    // Use a chain of `and_then` to traverse the subcommands,
    // which correctly handles mutable borrowing across iterations.
    let mut current_cmd_option: Option<&mut Command> = Some(root_cmd);

    for part in parts {
        current_cmd_option = current_cmd_option.and_then(|cmd| cmd.find_subcommand_mut(part));
        if current_cmd_option.is_none() {
            eprintln!("Error: Command '{}' not found in path '{}'", part, filter_command);
            print_help_clap_generated();
            return; // Exit early if path is not found
        }
    }

    if let Some(final_cmd) = current_cmd_option {
        // After successfully traversing the entire path, `final_cmd` now points to the
        // deepest subcommand requested. Print its help.
        final_cmd.print_help().expect("Failed to print filtered help");
    } else {
        // This case should ideally not be hit if the `is_none()` check and `return` work correctly.
        // It would imply `root_cmd` itself was somehow None, or an empty filter_command was passed
        // and then no `final_cmd` was found.
        print_help_clap_generated();
    }
}

